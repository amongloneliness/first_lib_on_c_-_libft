#ifndef LIBFT_H
#define LIBFT_H

/*            директивы
 *  ------------------------------
 *    <unistd.h>  - символы кодировки unicode
 *    <stddef.h>  - директива, включающая size_t тип данных
 *    <stddef.h>  - директива для использования malloc(), free() функций
 *                  для работы с памятью
 *  ------------------------------
 * 
 *            прототипы
 *  ------------------------------
 *  void    ft_putchar(..);      выводит символ <c> в консоль
 *  -------------------------------------------------------------------------------
 *  void    ft_putstr(..);       выводит массив символов (строки) в консоль
 *  -------------------------------------------------------------------------------
 *  void    ft_putdigit(..);     выводит цифру в консоль
 *  -------------------------------------------------------------------------------
 *  int     ft_len_nbr(..);      возвращает длину числа (количество цифр)
 *  -------------------------------------------------------------------------------
 *  void    ft_putnbr(..);       выводит число в консоль
 *  -------------------------------------------------------------------------------
 *  char   *ft_strchr(..);       выполняет поиск первого вхождения символа в строку
 *                               и возвращает ссылку на него (иначе - NULL)
 *  -------------------------------------------------------------------------------
 *  char   *ft_strrchr(..);      выполняет поиск последнего вхождения символа в кон-
 *                               соль и возвращает ссылку на него (иначе - NULL)
 *  -------------------------------------------------------------------------------
 *  int     ft_isalpha(..);      возвращает положительное значение, еслии символ
 *                               является алфавитным или цифрой
 *  -------------------------------------------------------------------------------
 *  int     ft_tolower(..);      возвращает символ алфавита, но преобразованный к
 *                               прописному виду
 *  -------------------------------------------------------------------------------
 *  int     ft_toupper(..);      возвращает символ алфавита, но преобразованный к
 *                               заглавному виду
 *  -------------------------------------------------------------------------------
 *  void   *ft_memset(..);       заполняет количество байтов переданным значением
 *  -------------------------------------------------------------------------------
 *  int     ft_atoi(..);         преобразует строку в число и возвращает значение
 *  -------------------------------------------------------------------------------
 *  void    ft_bzero(..)         заполняет байты памяти значением 0
 *  -------------------------------------------------------------------------------
 *  void   *ft_memcpy(..)        копирует память из одного массива данных в другой
 *                               в размере переданных байтов
 *  -------------------------------------------------------------------------------
 *  int     ft_strncmp(..);      сравнивает строки и возвращает разницу разлиичных 
 *                               символов
 *  -------------------------------------------------------------------------------
 *  size_t  ft_strlen(..);       возвращает длину строки
 *  -------------------------------------------------------------------------------
 *  int     ft_isalnum(..);      проверяет, является ли символ [алфавитным / цифрой]
 *  -------------------------------------------------------------------------------
 *  int     ft_isdigit(..);      проверяет, является ли символ цифрой
 *  -------------------------------------------------------------------------------
 *  int     ft_isascii(..);      проверяет, что кодировка символа является кодиров-
 *                               кой ascii
 *  -------------------------------------------------------------------------------
 *  int     ft_isprint(..);      проверяет, является ли символ выводимым в консоль
 *  -------------------------------------------------------------------------------
 *  char   *ft_strcpy(..);       копирует одну строку в другую и возвращает её
 *  -------------------------------------------------------------------------------
 *  size_t  ft_strlcpy(..);      копирует и объединяет строки, возвращая длину вто-
 *                               рой строки
 *  -------------------------------------------------------------------------------
 *  size_t  ft_strlcat(..);      объединяет две строки в одну
 *  -------------------------------------------------------------------------------
 *  size_t  ft_strnlen(..);      возвращает размер строки меньшего параметра
 *  -------------------------------------------------------------------------------
 *  char   *ft_strnstr (..);     выполняет поиск подстроки внутри строки и возвра-
 *                               щает ссылку на её первое вхождение (иначе - NULL)
 *  -------------------------------------------------------------------------------
 *  void   *ft_memccpy(..);      копирует не больше n байтов из области памяти src
 *                               в область памяти dest, останавливаясь, когда найден
 *                               <c> символ
 *  -------------------------------------------------------------------------------
 *  void   *ft_memmove(..);      возвращает указатель на <dest>. копирует n байтов
 *                               из одной области памяти в другую
 *  -------------------------------------------------------------------------------
 *  void   *ft_memchr(..);       сканирует область памяти и возвращает указатель на
 *                               переданное значение (иначе - NULL)
 *  -------------------------------------------------------------------------------
 *  int     ft_memcmp(..);       сравнивает первые n байтов области памяти str1 и
 *                               области памяти str2
 *  -------------------------------------------------------------------------------
 *  void   *ft_calloc(..);       выделяет память для динамической переменной и воз-
 *                               вращает указатель на неё
 *  -------------------------------------------------------------------------------
 *  char   *ft_strdup(..);       копирует строку и возвращает указатель на копию
 *  ------------------------------
 */

#include <unistd.h>
#include <stddef.h>
#include <stdlib.h>

void ft_putchar(char c);
void ft_putstr(char *str);
void ft_putdigit(int digit);
int ft_len_nbr(int nbr);
void ft_putnbr(int nbr);
void *ft_memset(void *s, int c, size_t n);
char *ft_strchr(const char *s, int c);
char *ft_strrchr(const char *s, int c);
int ft_isalpha(int c);
int ft_toupper(int c);
int ft_tolower(int c);
int ft_atoi(const char *nptr);
void ft_bzero(void *s, size_t n);
void *ft_memcpy(void *dest, const void *src, size_t n);
int ft_strncmp(const char *s1, const char *s2, size_t n);
size_t ft_strlen(const char *s);
int ft_isalnum(int c);
int ft_isdigit(int c);
int ft_isascii(int c);
int ft_isprint(int c);
char *ft_strcpy(char *dst, const char *src);
size_t ft_strlcpy(char *dst, const char *src, size_t size);
size_t ft_strlcat(char *dst, const char *src, size_t size);
size_t ft_strnlen(const char *s, size_t maxlen);
char *ft_strnstr(const char *s, const char *find, size_t n);
void *ft_memccpy(void *dest, const void *src, int c, size_t n);
void *ft_memmove(void *dest, const void *src, size_t n);
void *ft_memchr(const void *s, int c, size_t n);
int ft_memcmp(const void *s1, const void *s2, size_t n);
void *ft_calloc(size_t bmemb, size_t size);
char *ft_strdup(const char *s);


#endif